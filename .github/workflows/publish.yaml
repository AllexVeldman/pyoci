name: Publish

on:
  push:
    branches:
      - main
    tags:
      - "*"

  pull_request:


concurrency:
  # Cancel existing runs when pushing to the same branch of a PR
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 15

    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/metadata-action@v5
        name: Docker meta
        id: meta
        with:
          images: |
            ghcr.io/allexveldman/pyoci
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          push: ${{ github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Smoke-test the image
      # The smoke test contains a build of the image but because the previous
      # step defines `load: true` the entire build will be from cache.
      - uses: extractions/setup-just@v2
      - uses: snok/install-poetry@v1
      - uses: astral-sh/setup-uv@v5
      - run: just test-smoke
      - run: docker compose logs pyoci
        working-directory: ./docker

  deploy:
    name: Deploy
    needs: [build]
    if: github.ref_type == 'tag'
    uses: ./.github/workflows/deploy.yaml
    with:
      version: ${{ needs.build.outputs.version }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    permissions:
      contents: read
      id-token: write
      packages: write
